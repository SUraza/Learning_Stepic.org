# Рекурсивные функции 
#1 decision 
n, k = map(int, input().split())

sz = max(n, k) + 1
c = [[0] * sz for _ in range(sz)]

c[0][0] = 1
for i in range(1, sz):
    for j in range(i + 1):
        c[i][j] = c[i - 1][j] + c[i - 1][j - 1]

print(c[n][k])

#2 decision 
def cnk(n, k):
    return cnk(n - 1, k) + cnk(n - 1, k - 1) if k != 0 and k <= n else  1 if k == 0 else  0

print(cnk(*map(int, input().split())))

#3 decision 
from math import factorial 

n, k = map(int, input().split())

u=(factorial(n))/(factorial(k)*factorial(n-k))
print(int(u))

#4 decision 
def c(n, k):
    if k > n:
        return 0
    if k == 0:
        return 1
    return c(n - 1, k) + c(n - 1, k - 1)

n, k = map(int, input().split())
print(c(n, k))

#5 decision 
import math
n, k = map(int, input().split())
print(math.factorial(n)//math.factorial(k)//math.factorial(n - k))

#6 decision 
Cnk = lambda n,k: 0 if k > n else k == 0 and 1 or k >= 0 and n >= 0 and Cnk(n-1, k) + Cnk(n-1, k-1)
print(Cnk(*map(int, input().split())))

#7 decision 
def comb(n, k):
    if n == k or k == 0:
        return 1
    else:
        return comb(n - 1, k) + comb(n - 1, k - 1)
    
print(comb(*(map(int, input().split()))))

#8 decision 
from scipy.special import binom as b
print(int(b(*map(int, input().split()))))
