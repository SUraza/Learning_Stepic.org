Шаг - 5:
Напишите функцию update_dictionary(d, key, value), которая принимает на вход словарь d и два числа: key и value.

Если ключ key есть в словаре d, то добавьте значение value в список, который хранится по этому ключу. 
Если ключа key нет в словаре, то нужно добавить значение в список по ключу 2⋅key. Если и ключа 2⋅key нет, то нужно добавить ключ 2⋅key в словарь и сопоставить ему список из переданного элемента [value].

Требуется реализовать только эту функцию, кода вне неё не должно быть.
Функция не должна вызывать внутри себя функции input и print.

Пример работы функции:

d = {}
print(update_dictionary(d, 1, -1))  # None
print(d)                            # {2: [-1]}
update_dictionary(d, 2, -2)
print(d)                            # {2: [-1, -2]}
update_dictionary(d, 1, -3)
print(d)                            # {2: [-1, -2, -3]}

Решение№1:
def update_dictionary(d, key, value):
        if key in d:
        d[key] += [value]
    elif 2*key in d:
        d[key*2] += [value]
    else:
        d[key*2] = [value]
        
Решение№2:
def update_dictionary(d, key, value):
    try:
        d[key].append(value)
    except KeyError:
        d.setdefault(2*key, []).append(value)
        
Решение№3:
def update_dictionary(d, key, value):
    key += key * (key not in d)
    d[key] = d.get(key, []) + [value]
    
    
    
    
Шаг - 6:
Когда Антон прочитал «Войну и мир», ему стало интересно, сколько слов и в каком количестве используется в этой книге.

Помогите Антону написать упрощённую версию такой программы, которая сможет подсчитать слова, разделённые пробелом и 
вывести получившуюся статистику.

Программа должна считывать одну строку со стандартного ввода и выводить для каждого уникального слова в этой строке 
число его повторений (без учёта регистра) в формате "слово количество" (см. пример вывода). 
Порядок вывода слов может быть произвольным, каждое уникальное слово должно выводиться только один раз.
    
Решение№1:
string = str(input())
string = string.lower()
dic = {}
string = string.lower()
for str in string.split():
  temp = string.split().count(str)
  dic[str] = temp
for key,value in dic.items():
  print(key, value)
  
Решение№2:
x = input().lower().split()
F = {}
for i in x:
    if i not in F:
        F[i] = 1
    else:
        F[i] += 1
for i, j in F.items():
    print(i, j, end="\n")
    
Решение№3:
from collections import Counter
words = input().lower().split()
c = Counter(words)
for key, value in c.items():
    print ('{} {}'.format(key, value))
    
Решение№4:
words = input().lower().split()
dodo=dict((i, words.count(i)) for i in words)
for i in dodo:
  print(i, dodo[i])
  
Решение№5:
a=input().lower().split(' ')
for i in set(a):
    print (i, a.count(i))




Шаг - 7:
Имеется реализованная функция f(x), принимающая на вход целое число x, которая вычисляет некоторое целочисленое 
значение и возвращает его в качестве результата работы.

Функция вычисляется достаточно долго, ничего не выводит на экран, не пишет в файлы и зависит только от переданного
аргумента x.

Напишите программу, которой на вход в первой строке подаётся число n — количество значений x, для которых
требуется узнать значение функции f(x), после чего сами эти n значений, каждое на отдельной строке. 
Программа должна после каждого введённого значения аргумента вывести соответствующие значения функции f на отдельной строке. 

Для ускорения вычисления необходимо сохранять уже вычисленные значения функции при известных аргументах.

Обратите внимание, что в этой задаче установлено достаточно сильное ограничение в две секунды по времени
исполнения кода на тесте. 

Решение№1:
n = int(input())
d ={}
while n > 0:
    x = int(input())
    if x not in d:
        d[x] = f(x)
        n -= 1
    else:
        n -= 1
    print (d[x])
    
Решение№2:
my_dict = {}

for i in [int(input()) for i in range(int(input()))]:
    if my_dict.get(i) is None:
        my_dict[i] = f(i)
        print(my_dict[i])
    else:
        print(my_dict[i])
        
Решение№3:
d = {}
for i in range(int(input())):
    j = int(input())
    if j not in  d.keys():
        d[j] = f(int(j))
    print (d[j])
    
Решение№4:
a=int(input())

d={}

while a>0:
    i=int(input())
    if i not in d.keys():
        d[i] = f(i)

    print(d[i])
    a-=1

Решение№5:
x = [int(input()) for i in range(int(input()))]
b = {x : f(x) for x in set(x)}
print (*[b[i] for i in x], sep='\n')
