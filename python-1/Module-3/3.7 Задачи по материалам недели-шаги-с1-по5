Шаг - 1:
Напишите программу, которая принимает на стандартный вход список игр футбольных команд с результатом матча и выводит 
на стандартный вывод сводную таблицу результатов всех матчей.

За победу команде начисляется 3 очка, за поражение — 0, за ничью — 1.

Формат ввода следующий:
В первой строке указано целое число n — количество завершенных игр.
После этого идет n строк, в которых записаны результаты игры в следующем формате:
Первая_команда;Забито_первой_командой;Вторая_команда;Забито_второй_командой

Вывод программы необходимо оформить следующим образом:
Команда:Всего_игр Побед Ничьих Поражений Всего_очков

Конкретный пример ввода-вывода приведён ниже.

Порядок вывода команд произвольный.

Решение №1:
n = int(input())
sar = [input().split(';') for i in range(n)]
teams ={}
for i in range(n):
    if sar[i][0] not in teams:
        teams[sar[i][0]]=[]
    if sar[i][2] not in teams:
        teams[sar[i][2]]=[]
    if sar[i][1]>sar[i][3]:
        teams[sar[i][0]]+=[1,1,0,0,3]
        teams[sar[i][2]]+=[1,0,0,1,0]
    elif sar[i][1]==sar[i][3]:
        teams[sar[i][0]]+=[1,0,1,0,1]
        teams[sar[i][2]]+=[1,0,1,0,1]
    else:
        teams[sar[i][2]]+=[1,1,0,0,3]
        teams[sar[i][0]]+=[1,0,0,1,0]
for key in teams:
    lst = teams[key]
    lst_2 = [sum([lst[i+j] for j in range(0,len(lst),5)]) for i in range(5)]
    print(key+':'+str(lst_2[0]),lst_2[1],lst_2[2],lst_2[3],lst_2[4])
    
Решение №2:
total = {}
scores = {3: 1, 1: 2, 0: 3}
for _ in range(int(input())):
    p1, g1, p2, g2 = input().split(';')
    s = (0, 3) if g1 < g2 else (1, 1) if g1 == g2 else (3, 0)
    for p, score in zip((p1, p2), s):
        if p not in total:
            total[p] = [0, 0, 0, 0, 0]
        total[p][0] +=1
        total[p][scores[score]] +=1
        total[p][4] += score
for team, results in total.items():
    print(f'{team}:', *results)

Решение №3:
from sys import stdin
dict = {}
for _ in range(int(stdin.readline())):
    team1, g1, team2, g2 = stdin.readline().split(';')
    if team1 not in dict.keys():
        dict[team1] = [0, 0, 0]
    if team2 not in dict.keys():
        dict[team2] = [0, 0, 0]

    if int(g1) > int(g2):
        i, j = 0, 2
    elif int(g1) < int(g2):
        i, j = 2, 0
    else:
        i, j = 1, 1

    dict[team1][i] += 1
    dict[team2][j] += 1

for key, value in dict.items():
    points = value[0] * 3 + value[1]
    print(key+':', sum(value), *value, points)

Решение №4:
n = int(input())
d = dict()
for i in range(n):
    line = input().split(";")
    team1 = line[0]
    team1_score = int(line[1])
    team2 = line[2]
    team2_score = int(line[3])

    if team1 not in d:
        d[team1] = [0, 0, 0]
    if team2 not in d:
        d[team2] = [0, 0, 0]

    d[team1][0] += 1
    d[team2][0] += 1

    if team1_score > team2_score:
        # Team 1 win
        d[team1][1] += 1
    elif team1_score == team2_score:
        # Draw
        d[team1][2] += 1
        d[team2][2] += 1
    else:
        # Team 2 win
        d[team2][1] += 1

for key, value in d.items():
    print(key, end=":")
    print(value[0], value[1], value[2], value[0] - value[1] - value[2], 3 * value[1] + value[2])
    
Решение №5:
d, n = {},int(input())
for _ in range(n):
    c = input().strip().split(";")
    d[c[0]] = d.get(c[0],[0,0,0])
    d[c[2]] = d.get(c[2], [0, 0, 0])
    d[c[0]][1] += c[1]==c[3]
    d[c[2]][1] += c[1]==c[3]
    d[c[0]][0] += c[1]>c[3]
    d[c[2]][2] += c[1]>c[3]
    d[c[0]][2] += c[1]<c[3]
    d[c[2]][0] += c[1]<c[3]
for c in d:
    print(c, end=':')
    print(sum(d[c]),*d[c],3*d[c][0]+d[c][1])





Шаг - 2:
Дополнительная
В какой-то момент в Институте биоинформатики биологи перестали понимать, что говорят информатики: они говорили 
каким-то странным набором звуков. 

В какой-то момент один из биологов раскрыл секрет информатиков: они использовали при общении подстановочный шифр, 
т.е. заменяли каждый символ исходного сообщения на соответствующий ему другой символ. Биологи раздобыли ключ к шифру
и теперь нуждаются в помощи: 

Напишите программу, которая умеет шифровать и расшифровывать шифр подстановки. Программа принимает на вход две строки 
одинаковой длины, на первой строке записаны символы исходного алфавита, на второй строке — символы конечного алфавита, 
после чего идёт строка, которую нужно зашифровать переданным ключом, и ещё одна строка, которую нужно расшифровать.

Пусть, например, на вход программе передано:
abcd
*d%#
abacabadaba
#*%*d*%

Это значит, что символ a исходного сообщения заменяется на символ * в шифре, b заменяется на d, c — на % и d — на #.
Нужно зашифровать строку abacabadaba и расшифровать строку #*%*d*% с помощью этого шифра. Получаем следующие строки,
которые и передаём на вывод программы:
*d*%*d*#*d*
dacabac

Решение №1:
d1,d2,w1,w2 = input(), input(), input(), input()
print(''.join([d2[d1.index(i)] for i in w1]))
print(''.join([d1[d2.index(i)] for i in w2]))

Решение №2:
int1 = str(input())
int2 = str(input())
ans1 = str(input())
ans2 = str(input())
d = {}
for i in range(len(int1)):
    d[int1[i]]=int2[i]

def cript(x,y):
    ans = ""
    for i in range(len(x)):
        ans += y.get(x[i])
    return ans

Решение №3:
a=[input() for i in range(4)]
[[print(a[1][i],end='') if s==w else 0 for i,s in enumerate(a[0])] for w in a[2]]
print()
[[print(a[0][i],end='') if s==w else 0 for i,s in enumerate(a[1])] for w in a[3]]

Решение №4:
a, b, c, d = (input() for i in range(4))
for i in c: print (b[a.find(i)], end='') 
print()   
for i in d: print (a[b.find(i)], end='')  

Решение №5:
a = (input(), input())
print(f'{input().translate(str.maketrans(a[0], a[1]))}\n{input().translate(str.maketrans(a[1], a[0]))}')





Шаг - 3:
Простейшая система проверки орфографии основана на использовании списка известных слов. Каждое слово в проверяемом 
тексте ищется в этом списке и, если такое слово не найдено, оно помечается, как ошибочное.

Напишем подобную систему.

Через стандартный ввод подаётся следующая структура: первой строкой — количество d записей в списке известных слов,
после передаётся  d строк с одним словарным словом на строку, затем — количество l строк текста, 
после чего — l строктекста.

Напишите программу, которая выводит слова из текста, которые не встречаются в словаре. Регистр слов не учитывается. 
Порядок вывода слов произвольный. Слова, не встречающиеся в словаре, не должны повторяться в выводе программы.

Решение №1:
dict_set = {input().lower() for i in range( int( input() ) )}
word_set = set()
for q in range( int( input() ) ):
    for w in input().lower().split(): word_set.add(w)
for e in word_set - dict_set: print(e)

Решение №2:
s = {input().lower() for i in range(int(input()))}
d = ' '.join([input().lower() for i in range(int(input()))]).split(' ')
print(*{i for i in d if i not in s}, sep='\n')

Решение №3:
word_count = int(input())
dictionary = set(input().lower() for _ in range(word_count))
text_lines = int(input())
text = (input() for _ in range(text_lines))
text = set(word.lower() for line in text for word in line.strip().split())
difference = text - dictionary
for word in difference:
    print(word)
    
Решение №4:
dict = {input().lower() for x in range(int(input()))}
text=set()
for i in range(int(input())):
    {text.add(x.lower()) for x in input().split()}

[print(x) for x in text - dict]

Решение №5:
dic = [input().lower() for _ in range(int(input()))]
words = sum([input().split() for _ in range(int(input()))], [])
err = set([i for i in words if i.lower() not in dic])
print(*err, sep='\n')





Шаг - 4:
Группа биологов в институте биоинформатики завела себе черепашку.

После дрессировки черепашка научилась понимать и запоминать указания биологов следующего вида:
север 10
запад 20
юг 30
восток 40
где первое слово — это направление, в котором должна двигаться черепашка, а число после слова — это положительное 
расстояние в сантиметрах, которое должна пройти черепашка.

Но команды даются быстро, а черепашка ползёт медленно, и программисты догадались, что можно написать программу, 
которая определит, куда в итоге биологи приведут черепашку. Для этого программисты просят вас написать программу, 
которая выведет точку, в которой окажется черепашка после всех команд. Для простоты они решили считать, что движение 
начинается в точке (0, 0), и движение на восток увеличивает первую координату, а на север — вторую.

Программе подаётся на вход число команд $n$, которые нужно выполнить черепашке, после чего $n$ строк с самими командами. 
Вывести нужно два числа в одну строку: первую и вторую координату конечной точки черепашки. Все координаты целочисленные.

Решение №1:
napr = {'север': (0, 1), 'запад': (-1, 0), 'юг': (0, -1), 'восток': (1, 0)}
n = int(input())
x_list = [(input()).split(' ') for x in range(n)]
dvizh = [(napr[x][0]*int(y), napr[x][1]*int(y)) for x, y in x_list]
res = (sum([x for x, y in dvizh]), sum([y for x, y in dvizh]))
print(' '.join(map(str, res)))

Решение №2:
directions = {
    'север' : (0 , 1),
    'юг' : (0, -1),
    'запад' : (-1, 0),
    'восток' : (1, 0)
}
commands = [input() for i in range(int(input()))]
x, y = 0, 0
for command in commands:
    c = command.split()
    dx, dy = directions[c[0]]
    x, y = x + int(c[1]) * dx, y + int(c[1]) * dy
print(x, y)

Решение №3:
k=int(input())
d={"север":0,"юг":0,"запад":0,"восток":0}
while k>0:
    st=input().split(" ")
    d[st[0]]+=int(st[1])
    k-=1
print(d["восток"]-d["запад"],d["север"]-d["юг"])

Решение №4:
a=[input().split() for i in range(int(input()))]
sum2 = lambda s: sum(map(lambda i: int(i[1]), filter (lambda i: i[0]==s,a )))
print(sum2('восток')- sum2('запад'), sum2('север')- sum2('юг'))

Решение №5:
x = 0 
y = 0
for i in range(int(input())):
    command,point = input().split()
    if command == 'север': y += int(point)
    elif command == 'юг': y -= int(point)
    elif command == 'запад': x -= int(point)
    elif command == 'восток': x += int(point)
print(x, y)





Шаг - 5:
Дан файл с таблицей в формате TSV с информацией о росте школьников разных классов.

Напишите программу, которая прочитает этот файл и подсчитает для каждого класса средний рост учащегося.

Файл состоит из набора строк, каждая из которых представляет собой три поля:
Класс Фамилия Рост

Класс обозначается только числом. Буквенные модификаторы не используются. Номер класса может быть от 1 до 11 включительно. 
В фамилии нет пробелов, а в качестве роста используется натуральное число, но при подсчёте среднего требуется вычислить 
значение в виде вещественного числа.

Выводить информацию о среднем росте следует в порядке возрастания номера класса (для классов с первого по одиннадцатый). 
Если про какой-то класс нет информации, необходимо вывести напротив него прочерк, например:

Решение №1:
import pandas as pd
data = pd.read_csv ('dataset_3380_5.txt', sep = '\t', header = None)
x = data.groupby([0]).mean()
for i in range(1,12):
    print('{} {}'.format(i, x[2][i]))
    
Решение №2:
a = [[] for i in range(11)]
print (a)
with open ('1.txt', 'r') as inf:
  for line in inf:
    s = line.split('\t')
    a[int(s[0])-1].append(int(s[2]))

with open ('2.txt', 'w') as ouf:
  for i in range(len(a)):
    if len(a[i]) == 0:
      t = '-'
    else:
      t = str(sum(a[i])/len(a[i]))
    tt = str(i+1) + " " + t + "\n"
    ouf.write(tt)
    
Решение №3:
r = [[0,0] for _ in range(11)]
with open('input.txt') as inf:
    for line in inf:
        s = line.strip().split('\t')
        r[int(s[0])-1][0] += int(s[2])
        r[int(s[0])-1][1] += 1
with open('output.txt','w') as ouf:
    [ouf.write(str(i+1)+' '+('-' if r[i][0]==0 else str(r[i][0]/r[i][1]))+'\n')

Решение №4:
heights = {str(i): [] for i in range(1, 12)}

with open('data.txt', 'r') as f:
    r = [row.strip().split('\t') for row in f.readlines()]

[heights[row[0]].append(int(row[-1])) for row in r]
[print(k, sum(v) / len(v) if v else '-') for k, v in heights.items()]

Решение №5:
tabl=[]                                       #инициализация таблицы со списком учащихся
spis=dict.fromkeys([int(i)+1 for i in range(11)],'-')      #инициализация списка класса со значением среднего роста='-'
with open('text.txt') as f:                        #Чтение из файла списка учащихся в таблицу
  for line in f:
    tabl += [line.split()]
a=0                                            #счетчик количества учеников в классе
for key in spis.keys():                             #пробегаемся по классу и ищем, есть ли класс в списке,
  for i in tabl:                   
    if int(i[0])==key:                               #если есть,
      a+=1                                        #увеличиваем счетчик учащихся класса на 1
      if int(i[0]) in spis and spis[int(i[0])]=='-':      #если это первое вхождение, то '-' заменяем на рост учащегося
        spis.update({int(i[0]):float(i[2])})
      elif int(i[0]) == key:                        #если не первое, то прибавляем рост текущего учащегося, к уже вычисленным 
        spis[key]+=float(i[2])                        #ростам
    if i==tabl[len(tabl)-1] and spis[key]!='-':           #если проверено последнее значение в списке и есть вхождения для данного
      spis[key]/=a                                 #класса, то считаем среднее значение 
  a=0                                          #обнуляем счетчик, для подсчета в следующем классе
for key,value in spis.items():                      #выводим список
  print(key,value)

